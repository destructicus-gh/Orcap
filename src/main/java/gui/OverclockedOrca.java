package main.java.gui;

import java.awt.*;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.service.OrcaService;

/**
 * Created by a689638 on 3/23/2016.
 * Copyright (C) 2016 HEB
 *
 * @author Ryan Anders
 *         This software is the confidential and proprietary information
 *         of HEB
 */


public class OverclockedOrca {
    private static OverclockedOrca self;
    private JPanel panel1;
    private JTree tree1;
    private JList<String> list1;
    private JButton doThisButton;
    private JLabel rightLabel;

//    DefaultListModel<MenuOption> model;
    //MenuOption current;

    public OverclockedOrca() {
        if (self == null) {
            self = this;
        } else {
            throw new IllegalStateException("Cannot Instantiate more than one instance of Orca");
        }
        DefaultMutableTreeNode top =
                new DefaultMutableTreeNode("The Java Series");
        $$$setupUI$$$();
//        model = new DefaultListModel<>();
//        list1.setModel(model);
//        list1.addListSelectionListener(OrcaService::optionSelect);
        // doThisButton.addActionListener(e -> current.doAction());
    }


    public JPanel getPanel1() {
        return panel1;
    }

    public JTree getTree1() {
        return tree1;
    }

//    public JList getList1() {
//        return list1;
//    }

    public JButton getDoThisButton() {
        return doThisButton;
    }

    public static OverclockedOrca getSelf() {
        return self;
    }

    public JLabel getRightLabel() {
        return rightLabel;
    }

//    public DefaultListModel<MenuOption> getListModel() {
//        return model;
//    }

//    public MenuOption getCurrent() {
//        return current;
//    }
//
//    public static void setCurrent(MenuOption current) {
//        self.current = current;
//    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
        DefaultMutableTreeNode top =
                new DefaultMutableTreeNode("The Java Series");
        OrcaService.LoadOptions(top);
        tree1 = new JTree(top);
        tree1.getSelectionModel().setSelectionMode
                (TreeSelectionModel.SINGLE_TREE_SELECTION);
        tree1.addTreeSelectionListener(OrcaService.getTreeListener());


    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        final JSplitPane splitPane1 = new JSplitPane();
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(splitPane1, gbc);
        splitPane1.setLeftComponent(tree1);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        splitPane1.setRightComponent(panel2);
        rightLabel = new JLabel();
        rightLabel.setText("Label");
        panel2.add(rightLabel, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        list1 = new JList();
        list1.setOpaque(false);
        panel2.add(list1, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        doThisButton = new JButton();
        doThisButton.setText("Do This");
        panel2.add(doThisButton, new GridConstraints(2, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
